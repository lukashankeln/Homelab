name: "applications"
on:
  push:
    branches: ["main"]
    paths: ["applications/**"]

jobs:
  argocd-linter:
    name: "ArgoCD Linter"
    runs-on: ubuntu-latest
    container:
      image: docker-registry.hankeln.work/gitea-runner:1.0.6
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
      - uses: azure/setup-helm@v4.3.0
      - name: "Install yq"
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
      - name: "ArgoCD Linter"
        run: |
          #!/bin/bash

          # Directory containing YAML files (passed as argument)
          YAML_DIR="./applications"

          if [ -z "$YAML_DIR" ]; then
            echo "Usage: $0 <directory-with-yaml-files>"
            exit 1
          fi

          # Check for dependencies
          # for cmd in yq helm; do
          #   if ! command -v $cmd &> /dev/null; then
          #     echo "Error: '$cmd' is required but not installed."
          #     exit 1
          #   fi
          # done

          # Function to process a single ArgoCD Application file
          process_argo_app() {
            local file="$1"
            echo "Processing: $file"

            # Parse values
            local repo_url
            local target_revision
            local chart_name
            local values_file="values-temp-$(basename "$file" .yaml).yaml"
            local outputfile="output-temp-$(basename "$file" .yaml).yaml"

            repo_url=$(yq e '.spec.source.repoURL' "$file")
            target_revision=$(yq e '.spec.source.targetRevision' "$file")
            chart_name=$(yq e '.spec.source.chart' "$file")

            # Extract valuesObject
            yq e '.spec.source.helm.valuesObject' "$file" > "$values_file"

            echo "  Repo URL:        $repo_url"
            echo "  Target Revision: $target_revision"
            echo "  Chart Name:      $chart_name"
            echo "  Values File:     $values_file"

            # Run helm template
            echo "  Removing existing Helm repo..."
            helm repo remove $chart_name || true

            echo "  Adding Helm repo..."
            helm repo add $chart_name $repo_url

            echo "  Updating Helm repo..."
            helm repo update

            echo "  Running helm template..."
            helm template "$chart_name" "$chart_name/$chart_name" \
              --version "$target_revision" \
              --values "$values_file" > "$outputfile"

            echo "------------------------------------------------------------"
          }

          # Loop over all YAML files in the directory
          for yaml_file in "$YAML_DIR"/*.yaml "$YAML_DIR"/*.yml; do
            [ -e "$yaml_file" ] || continue  # skip if no matching files
            process_argo_app "$yaml_file"
          done
